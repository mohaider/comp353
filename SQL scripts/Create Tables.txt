DROP DATABASE IF EXISTS Daycare;
CREATE DATABASE Daycare;

USE Daycare;


CREATE TABLE IF NOT EXISTS Family
(
ID int AUTO_INCREMENT,
LastName VARCHAR(50) NOT NULL,
PhoneNum VARCHAR(12) NOT NULL,
UNIQUE(ID),
PRIMARY KEY(ID)
);

CREATE TABLE IF NOT EXISTS Child
(
MedicareNum VARCHAR(14) NOT NULL,
SEX VARCHAR(12) NOT NULL,
DOB DATE NOT NULL,
Name VARCHAR(100) NOT NULL,
AgeGroup VARCHAR(25) NOT NULL,
UNIQUE(MedicareNum),
PRIMARY KEY(MedicareNum)
);

CREATE TABLE IF NOT EXISTS ChildOf
(
MedicareNum VARCHAR(14) NOT NULL,
FamilyID int NOT NULL,
FOREIGN KEY(MedicareNum)
	REFERENCES Child(MedicareNum)
	ON DELETE CASCADE,
FOREIGN KEY(FamilyID)
	REFERENCES Family(ID)
	ON DELETE CASCADE,
PRIMARY KEY(MedicareNum)
);

CREATE TABLE IF NOT EXISTS AuthorizedContact
(
ContactNumber VARCHAR(12) NOT NULL,
Name VARCHAR(100) NOT NULL,
TypeOfRelationship VARCHAR(50) NOT NULL,
IsEmergencyContact VARCHAR(4) NOT NULL,
CONSTRAINT Chk_Type CHECK (IsEmergencyContact IN ('YES', 'NO')),
UNIQUE (ContactNumber),
PRIMARY KEY(ContactNumber) 
);

CREATE TABLE IF NOT EXISTS IsAuthorized
(
ContactNumber VARCHAR(12) NOT NULL,
FamilyID INT NOT NULL,
FOREIGN KEY (ContactNumber)
	REFERENCES AuthorizedContact(ContactNumber)
	ON DELETE CASCADE,
FOREIGN KEY (FamilyID)
	REFERENCES Family(ID)
	ON DELETE CASCADE,
PRIMARY KEY (ContactNumber)
);


CREATE TABLE IF NOT EXISTS Guardian
(
ID INT AUTO_INCREMENT,
Name VARCHAR(100) NOT NULL,
Address VARCHAR(100) NOT NULL,
PhoneNumber VARCHAR(12) NOT NULL,
GuardianOrParent VARCHAR(9) NOT NULL,
CONSTRAINT Chk_Parent CHECK (GuardianOrParent IN ('Guardian', 'Parent')),
UNIQUE (ID),
PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS PrimaryCaretaker
(
FamilyID INT NOT NULL,
GuardianID INT NOT NULL,
FOREIGN KEY (GuardianID)
	REFERENCES Guardian(ID)
	ON DELETE CASCADE,
FOREIGN KEY (FamilyID)
	REFERENCES Family(ID)
	ON DELETE CASCADE,
PRIMARY KEY (FamilyID, GuardianID)
);

CREATE TABLE IF NOT EXISTS Allergies
(
AllergyType VARCHAR(50) NOT NULL,
Severity VARCHAR(20) NOT NULL,
RecommendedAct VARCHAR(150) NOT NULL,
UNIQUE (AllergyType),
PRIMARY KEY (AllergyType)
);

CREATE TABLE IF NOT EXISTS AllergySheet
(
AllergyType VARCHAR(50) NOT NULL,
MedicareNum VARCHAR(14) NOT NULL,
FOREIGN KEY (AllergyType)
	REFERENCES Allergies(AllergyType)
	ON DELETE CASCADE,
FOREIGN KEY (MedicareNum)
	REFERENCES Child(MedicareNum)
	ON DELETE CASCADE,
PRIMARY KEY (AllergyType, MedicareNum)
);


CREATE TABLE IF NOT EXISTS Medication
(
DrugCode VARCHAR(15) NOT NULL,
MedicationName VARCHAR(30) NOT NULL,
DrugAdministration VARCHAR(15) NOT NULL,
CONSTRAINT chk_Drug CHECK (DrugAdministration IN ('Oral', 'Injection')),
UNIQUE (DrugCode),
PRIMARY KEY (DrugCode)
);

CREATE TABLE IF NOT EXISTS MedicalSheet
(
DrugCode VARCHAR(15) NOT NULL,
MedicareNum VARCHAR(14) NOT NULL,
FOREIGN KEY (DrugCode)
	REFERENCES Medication(DrugCode)
	ON DELETE CASCADE,
FOREIGN KEY (MedicareNum)
	REFERENCES Child(MedicareNum)
	ON DELETE CASCADE,
PRIMARY KEY (DrugCode, MedicareNum)
);

CREATE TABLE IF NOT EXISTS Facility
(
ID INT AUTO_INCREMENT,
Type VARCHAR(25) NOT NULL,
Address VARCHAR(50) NOT NULL,
PhoneNum VARCHAR(12) NOT NULL,
CONSTRAINT chk_type CHECK (Type IN('Home', 'Center')),
UNIQUE (ID),
PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS RegistrationSheet
(
MedicareNum VARCHAR(14) NOT NULL,
FacilityID INT NOT NULL,
StartDate DATE NOT NULL,
EndDate DATE,
AgeGroup VARCHAR(25) NOT NULL,
FOREIGN KEY (MedicareNum)
	REFERENCES Child(MedicareNum)
	ON DELETE CASCADE,
FOREIGN KEY (FacilityID)
	REFERENCES Facility(ID)
	ON DELETE CASCADE,
PRIMARY KEY (MedicareNum)
);

CREATE TABLE IF NOT EXISTS Room
(
RoomNum VARCHAR(4) NOT NULL,
AgeGroup VARCHAR(25) NOT NULL,
Ext VARCHAR(12) NOT NULL,
UNIQUE (RoomNum),
PRIMARY KEY(RoomNum)
);

CREATE TABLE IF NOT EXISTS Houses
(
RoomNum VARCHAR(4) NOT NULL,
FacilityID INT NOT NULL,
FOREIGN KEY (RoomNum)
	REFERENCES Room(RoomNum)
	ON DELETE CASCADE,
FOREIGN KEY (FacilityID)
	REFERENCES Facility(ID)
	ON DELETE CASCADE,
PRIMARY KEY (RoomNum)
);

CREATE TABLE IF NOT EXISTS SeatedInto
(
MedicareNum VARCHAR(14) NOT NULL,
RoomNum VARCHAR(4) NOT NULL,
FOREIGN KEY (MedicareNum)
	REFERENCES Child(MedicareNum)
	ON DELETE CASCADE,
FOREIGN KEY (RoomNum)
	REFERENCES Room (RoomNum)
	ON DELETE CASCADE,
PRIMARY KEY (MedicareNum)
);

CREATE TABLE IF NOT EXISTS Employee        
(
EmpID INT AUTO_INCREMENT,
Name VARCHAR(30) NOT NULL,
Address VARCHAR(30) NOT NULL,
Role VARCHAR(7) NOT NULL,
StartDate DATE NOT NULL,
EndDate DATE,
SSN VARCHAR(9) NOT NULL,
PRIMARY KEY(EmpId),
CHECK(Role IN('Employee','Manager','CPE','NLE')), 

UNIQUE(SSN, EmpId)

);

CREATE TABLE IF NOT EXISTS LogIns
(
EmpID INT NOT NULL,
Password VARCHAR(150) NOT NULL,
AccessType VARCHAR(25) NOT NULL,
CONSTRAINT chk_AccessType CHECK (AccessType IN('CPE', 'Manager', 'Employee')),
FOREIGN KEY (EmpID)
	REFERENCES Employee(EmpID)
	ON DELETE CASCADE,
PRIMARY KEY (EmpID)
);

CREATE TABLE IF NOT EXISTS EmployeeLists
(
EmpID INT NOT NULL,
FacilityID INT NOT NULL,
FOREIGN KEY (EmpID)
	REFERENCES Employee(EmpID)
	ON DELETE CASCADE,
FOREIGN KEY (FacilityID)
	REFERENCES Facility (ID)
	ON DELETE CASCADE,
PRIMARY KEY (EmpID)
);

CREATE TABLE IF NOT EXISTS Supervises
(
EmpID INT NOT NULL,
RoomNum VARCHAR(4) NOT NULL,
FOREIGN KEY (EmpID)
	REFERENCES Employee(EmpID)
	ON DELETE CASCADE,
FOREIGN KEY (RoomNum)
	REFERENCES Room(RoomNum)
	ON DELETE CASCADE,
PRIMARY KEY (EmpID)
);

CREATE TABLE IF NOT EXISTS Invoices
(
ID INT AUTO_INCREMENT,
Balance DECIMAL(10,2) NOT NULL,
UNIQUE (ID),
PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS Payment
(
InvoiceID INT NOT NULL, 
FamilyID INT NOT NULL,
FOREIGN KEY (InvoiceID)
	REFERENCES Invoices(ID)
	ON DELETE CASCADE,
FOREIGN KEY (FamilyID)
	REFERENCES Family(ID)
	ON DELETE CASCADE,
PRIMARY KEY (InvoiceID)
);

CREATE TABLE IF NOT EXISTS PaymentType
(
InvoiceID INT NOT NULL,
ExpDate DATE NOT NULL,
CreditCardNum VARCHAR(50) NOT NULL,
PreAuthorized BOOL NOT NULL,
FOREIGN KEY (InvoiceID)
	REFERENCES Invoices(ID)
	ON DELETE CASCADE,
PRIMARY KEY (InvoiceID)
);

CREATE TABLE IF NOT EXISTS FacilityExpenseSheet
(
ExpenseSheetID INT AUTO_INCREMENT,
MonthYear VARCHAR(6) NOT NULL,
Total DECIMAL(10,2) NOT NULL,
PRIMARY KEY (ExpenseSheetID) 
);

CREATE TABLE IF NOT EXISTS MonthlyExpenses
( 
ExpenseSheetID INT NOT NULL,
UtilityBill DECIMAL(10,2) NOT NULL,
Rent DECIMAL(10,2) NOT NULL,
FOREIGN KEY(ExpenseSheetID)
	REFERENCES FacilityExpenseSheet(ExpenseSheetID)
	ON DELETE CASCADE,
PRIMARY KEY(ExpenseSheetID)

);

CREATE TABLE IF NOT EXISTS Expenses
( 
ExpenseSheetID INT NOT NULL,
FacilityID INT NOT NULL,
FOREIGN KEY(ExpenseSheetID)
	REFERENCES FacilityExpenseSheet(ExpenseSheetID)
	ON DELETE CASCADE,
FOREIGN KEY(FacilityID)
	REFERENCES Facility(ID)
	ON DELETE CASCADE,
PRIMARY KEY( ExpenseSheetID)
);

CREATE TABLE IF NOT EXISTS Schedule
( 
EmpID INT NOT NULL,
Day DATE NOT NULL,
Hours INT NOT NULL,
FOREIGN KEY(EmpID)
	REFERENCES Employee(EmpID)
	ON DELETE CASCADE,
PRIMARY KEY(EmpID,Day)
);

CREATE TABLE IF NOT EXISTS EmployeeSalary
(
EmpID INT NOT NULL,
ExpenseSheetID INT NOT NULL,
WeekNumYear VARCHAR(6) NOT NULL,
Wage DECIMAL(10,2) NOT NULL,
FOREIGN KEY(EmpID)
	REFERENCES Employee(EmpID)
	ON DELETE CASCADE,
FOREIGN KEY(ExpenseSheetID)
	REFERENCES FacilityExpenseSheet(ExpenseSheetID)
	ON DELETE CASCADE,
PRIMARY KEY(EmpID, ExpenseSheetID, WeekNumYear)
);


DELIMITER $$

CREATE TRIGGER CheckInsertGuardian
BEFORE INSERT ON PrimaryCaretaker
FOR EACH ROW  
BEGIN
	SELECT COUNT(GuardianID) INTO @cnt FROM PrimaryCaretaker WHERE FamilyID = NEW.FamilyID;
	IF @cnt >= 2 THEN
  		signal sqlstate '45000' set message_text = "Trying to enter a third Guardian";
	END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER CheckDeleteGuardian
BEFORE DELETE ON PrimaryCaretaker
FOR EACH ROW  
BEGIN
	SELECT COUNT(GuardianID) INTO @cnt FROM PrimaryCaretaker WHERE FamilyID = OLD.FamilyID;
	IF @cnt <= 1 THEN
  		signal sqlstate '45000' set message_text = "A family must have at least 1 guardian!";
	END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER BeforeSeatedInto
BEFORE INSERT ON SeatedInto
FOR EACH ROW  
BEGIN
	SELECT AgeGroup INTO @ChildAge FROM Child WHERE Child.MedicareNum = NEW.MedicareNum;
	SELECT AgeGroup INTO @RoomAge FROM Room WHERE Room.RoomNum = NEW.RoomNum;
	IF @ChildAge <> @RoomAge THEN
  		signal sqlstate '45000' set message_text = "Room age doesn't match";
	END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER BeforeRegistrationSheet
BEFORE INSERT ON RegistrationSheet
FOR EACH ROW  
BEGIN
	SELECT Type INTO @FacilityType FROM Facility WHERE Facility.ID = NEW.FacilityID;
	IF @FacilityType = "Home" THEN

		SELECT COUNT(*) INTO @cntChildren FROM RegistrationSheet WHERE FacilityID = NEW.FacilityID;
		IF @cntChildren >= 9 THEN 
   			signal sqlstate '45000' set message_text = "Too many children";
		END IF;
		IF NEW.AgeGroup = "Infant" THEN
			SELECT COUNT(*) INTO @cntInfant FROM RegistrationSheet WHERE FacilityID = NEW.FacilityID AND AgeGroup = "Infant";
			IF @cntInfant >= 4 THEN
				signal sqlstate '45000' set message_text = "Too many infants";
			END IF;
		END IF;
	END IF;

	IF @FacilityType = "Center" THEN
		SELECT COUNT(*) INTO @cntToddlers FROM RegistrationSheet WHERE FacilityID = NEW.FacilityID AND AgeGroup = "Toddler";
		SELECT COUNT(*) INTO @cntInfants FROM RegistrationSheet WHERE FacilityID = NEW.FacilityID AND AgeGroup = "Infant";
		SELECT COUNT(*) INTO @cntEmployees FROM EmployeeLists WHERE FacilityID = NEW.FacilityID;
		IF @cntEmployees = 0 THEN
			signal sqlstate '45000' set message_text = "No Employees";
		END IF;
		IF (@cntInfants >= 5 * @cntEmployees OR @cntToddlers >= 8 * @cntEmployees) OR (@cntInfants + @cntToddlers >= 8 * @cntEmployees) THEN 
   			signal sqlstate '45000' set message_text = "Ratio of employee to children off";
		END IF;
	END IF;
END$$

DELIMITER ;
